class ZulelaZoo:
    def__init__(self, name):
          self.name= name
          self.animals= []

def get_number_of_animals(self):
       return len (self.animals)

def add_animal(self, animal)
            self.animals.append(animal)

def remove_animal(self, animal)
    if animal in self.animals:
            self.animals.remove(animal)

def list_animals(self):
    print(f”Listing all animals in {self.name}:”)
    for animal in self.animals:
         print(f”{animal.get_name()}”)

class Animal:
      def __init__(self, name, age) :
           self.name=name
           self.age=age

      def get_name(self):
           return self.name

      def get_age(self):
           return self.age

      def make_sound(self):
           raise NotImplementedError (“This method should be overridden in subclasses”)

      def eat(self):
           print(f”{self.name} is eating.”)

      def sleep(self):
           print(f”{self.name} is sleeping.”)

class Mammal(Animal):
      def make_sound(self):
           return f”{self.name} makes a mammal sound!”

class Bird(Animal):
      def make_sound(self):
           return f”{self.name} chirps!”

class Reptile(Animal):
      def make_sound(self):
           return f”{self.name} hisses!”



class Enclosure:
      def__init__(self, name, location, size):
            self.name= name
            self.location= location
            self.size= size
            self.animals = []

def add_animal(self, animal)
            self.animals.append(animal)

def remove_animal(self, animal)
            self.animals.remove(animal)



def list_animals(self):
            print(f”Animals in {self.name} enclosure:”)
            for animal in self.animals:
                 print (f”{animal.get_name()}”)

def count_animals(self):
    return len(self.animals)

class Zookeeper:
    def__init__(self, name, ID)
          self.name= name
          self.ID= ID
          self.animals= []

    def feed_animals(self):
          print(f”{self.name} is feeding animals:”)
          for animal in self.animals:
                animal.eat()

def assign_animal(self, animal):
    self.animals.append(animal)
